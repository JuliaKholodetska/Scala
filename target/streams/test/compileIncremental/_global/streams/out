[debug] [zinc] IncrementalCompile -----------
[debug] IncrementalCompile.incrementalCompile
[debug] previous = Stamps for: 4 products, 4 sources, 3 libraries
[debug] current source = Set(${BASE}/src/test/scala/lab1/PascalSpec.scala, ${BASE}/src/test/scala/lab2/FuncSetSpec.scala, ${BASE}/src/test/scala/lab1/BalanceSpec.scala, ${BASE}/src/test/scala/lab1/CountChangeSpec.scala, ${BASE}/src/test/scala/lab4/HuffmanSpec.scala, ${BASE}/src/test/scala/lab1/ListsSuiteTest.scala, ${BASE}/src/test/scala/lab3/TweetSetSpec.scala)
[debug] > initialChanges = InitialChanges(Changes(added = Set(${BASE}/src/test/scala/lab4/HuffmanSpec.scala, ${BASE}/src/test/scala/lab3/TweetSetSpec.scala, ${BASE}/src/test/scala/lab1/ListsSuiteTest.scala), removed = Set(), changed = Set(), unmodified = ...),Set(),Set(),API Changes: Set())
[debug] 
[debug] Initial source changes:
[debug] 	removed: Set()
[debug] 	added: Set(${BASE}/src/test/scala/lab4/HuffmanSpec.scala, ${BASE}/src/test/scala/lab3/TweetSetSpec.scala, ${BASE}/src/test/scala/lab1/ListsSuiteTest.scala)
[debug] 	modified: Set()
[debug] Invalidated products: Set()
[debug] External API changes: API Changes: Set()
[debug] Modified binary dependencies: Set()
[debug] Initial directly invalidated classes: Set()
[debug] Sources indirectly invalidated by:
[debug] 	product: Set()
[debug] 	binary dep: Set()
[debug] 	external source: Set()
[debug] All initially invalidated classes: Set()
[debug] All initially invalidated sources:Set(${BASE}/src/test/scala/lab4/HuffmanSpec.scala, ${BASE}/src/test/scala/lab3/TweetSetSpec.scala, ${BASE}/src/test/scala/lab1/ListsSuiteTest.scala)
[debug] Initial set of included nodes: 
[debug] compilation cycle 1
[info] compiling 3 Scala sources to C:\Users\jkhol\Desktop\IdeaProjects\lab1-2\target\scala-2.13\test-classes ...
[debug] Getting org.scala-sbt:compiler-bridge_2.13:1.5.7:compile for Scala 2.13.1
[debug] [zinc] Running cached compiler b5d72a5 for Scala compiler version 2.13.1
[debug] [zinc] The Scala compiler is invoked with:
[debug] 	-bootclasspath
[debug] 	C:\Users\jkhol\.jdks\corretto-1.8.0_252\jre\lib\resources.jar;C:\Users\jkhol\.jdks\corretto-1.8.0_252\jre\lib\rt.jar;C:\Users\jkhol\.jdks\corretto-1.8.0_252\jre\lib\sunrsasign.jar;C:\Users\jkhol\.jdks\corretto-1.8.0_252\jre\lib\jsse.jar;C:\Users\jkhol\.jdks\corretto-1.8.0_252\jre\lib\jce.jar;C:\Users\jkhol\.jdks\corretto-1.8.0_252\jre\lib\charsets.jar;C:\Users\jkhol\.jdks\corretto-1.8.0_252\jre\lib\jfr.jar;C:\Users\jkhol\.jdks\corretto-1.8.0_252\jre\classes;C:\Users\jkhol\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-library\2.13.1\scala-library-2.13.1.jar
[debug] 	-classpath
[debug] 	C:\Users\jkhol\Desktop\IdeaProjects\lab1-2\target\scala-2.13\test-classes;C:\Users\jkhol\Desktop\IdeaProjects\lab1-2\target\scala-2.13\classes;C:\Users\jkhol\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scalatest\scalatest_2.13\3.1.1\scalatest_2.13-3.1.1.jar;C:\Users\jkhol\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scalactic\scalactic_2.13\3.1.1\scalactic_2.13-3.1.1.jar;C:\Users\jkhol\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\scala-reflect\2.13.1\scala-reflect-2.13.1.jar;C:\Users\jkhol\AppData\Local\Coursier\Cache\v1\https\repo1.maven.org\maven2\org\scala-lang\modules\scala-xml_2.13\1.2.0\scala-xml_2.13-1.2.0.jar
[debug] Invalidating (transitively) by inheritance from lab4.HuffmanSpec...
[debug] Initial set of included nodes: lab4.HuffmanSpec
[debug] Invalidated by transitive inheritance dependency: Set(lab4.HuffmanSpec)
[debug] Change NamesChange(lab4.HuffmanSpec,ModifiedNames(changes = UsedName(empty,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(runTests,[Default]), UsedName(runTest,[Default]), UsedName(KeyWord,[Default]), UsedName(after,[Default]), UsedName(a,[Default]), UsedName(b4,[Default]), UsedName(not,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(all,[Default]), UsedName(toString,[Default]), UsedName($isInstanceOf,[Default]), UsedName(assertThrows,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(have,[Default]), UsedName(noException,[Default]), UsedName(include,[Default]), UsedName(rerunner,[Default]), UsedName(startWith,[Default]), UsedName(assert,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(Equalizer,[Default]), UsedName(withFixture,[Default]), UsedName(a1,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(helloTable,[Default]), UsedName(thrownBy,[Default]), UsedName(createCatchReporter,[Default]), UsedName(AnWord,[Default]), UsedName(testTree,[Default]), UsedName(assume,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(execute,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(DecidedWord,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(!=,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(HuffmanSpec,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeast,[Default]), UsedName(behave,[Default]), UsedName(RegexWrapper,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(isInstanceOf,[Default]), UsedName(atMostOneOf,[Default]), UsedName(getClass,[Default]), UsedName(an,[Default]), UsedName($asInstanceOf,[Default]), UsedName(convertToFreeSpecStringWrapper,[Implicit]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(tags,[Default]), UsedName(every,[Default]), UsedName(styleName,[Default]), UsedName(hashCode,[Default]), UsedName(ab4,[Default]), UsedName(fail,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(<,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(inOrderOnly,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(runNestedSuites,[Default]), UsedName(execute$default$1,[Default]), UsedName(inOrder,[Default]), UsedName(equal,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(be,[Default]), UsedName(markup,[Default]), UsedName(sorted,[Default]), UsedName(AWord,[Default]), UsedName(d8,[Default]), UsedName(typeCheck,[Default]), UsedName(exactly,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(doCollected,[Default]), UsedName(endWith,[Default]), UsedName(orderedLeafs,[Default]), UsedName(compile,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(suiteName,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(only,[Default]), UsedName(matchPattern,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName($init$,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(execute$default$3,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(assertCompiles,[Default]), UsedName(lab4;HuffmanSpec;init;,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(length,[Default]), UsedName(>=,[Default]), UsedName(run,[Default]), UsedName(equals,[Default]), UsedName(assertTypeError,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(<=,[Default]), UsedName(exist,[Default]), UsedName(noElementsOf,[Default]), UsedName(intercept,[Default]), UsedName(key,[Default]), UsedName(execute$default$7,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(ResultOfTaggedAsInvocationOnString,[Default]), UsedName(writable,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(testNames,[Default]), UsedName(withClue,[Default]), UsedName(oneElementOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(!==,[Default]), UsedName(allElementsOf,[Default]), UsedName(registerTest,[Default]), UsedName(between,[Default]), UsedName(readable,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(noneOf,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(newTestCanceledException,[Default]), UsedName(testDataFor,[Default]), UsedName(finalize,[Default]), UsedName(determined,[Default]), UsedName(of,[Default]), UsedName(the,[Default]), UsedName(contain,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(regex,[Default]), UsedName(size,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(NoArgTest,[Default]), UsedName(allOf,[Default]), UsedName(===,[Default]), UsedName(c6,[Default]), UsedName(suiteId,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(RegexWord,[Default]), UsedName(execute$default$4,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(pending,[Default]), UsedName(execute$default$6,[Default]), UsedName(message,[Default]), UsedName(definedAt,[Default]), UsedName(notify,[Default]), UsedName(FreeSpecStringWrapper,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(>,[Default]), UsedName(wait,[Default]), UsedName(decided,[Default]), UsedName(value,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(cancel,[Default]), UsedName(alert,[Default]), UsedName(synchronized,[Default]), UsedName(defined,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(defaultEquality,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(expectedTestCount,[Default]), UsedName(fullyMatch,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(info,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(Collected,[Default]), UsedName(TheAfterWord,[Default]), UsedName(no,[Default]), UsedName(succeed,[Default]), UsedName(notifyAll,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(DeterminedWord,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(oneOf,[Default]), UsedName(##,[Default]), UsedName(execute$default$5,[Default]), UsedName(atMost,[Default]), UsedName(note,[Default]), UsedName(helloTree,[Default]), UsedName(ValueWord,[Default]))) invalidates 1 classes due to The lab4.HuffmanSpec has the following implicit definitions changed:
[debug] 	UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToFreeSpecStringWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]).
[debug]   > by transitive inheritance: Set(lab4.HuffmanSpec)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from lab3.TweetSetSpec...
[debug] Initial set of included nodes: lab3.TweetSetSpec
[debug] Invalidated by transitive inheritance dependency: Set(lab3.TweetSetSpec)
[debug] Change NamesChange(lab3.TweetSetSpec,ModifiedNames(changes = UsedName(empty,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(runTests,[Default]), UsedName(runTest,[Default]), UsedName(KeyWord,[Default]), UsedName(after,[Default]), UsedName(a,[Default]), UsedName(not,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(all,[Default]), UsedName(toString,[Default]), UsedName($isInstanceOf,[Default]), UsedName(assertThrows,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(have,[Default]), UsedName(noException,[Default]), UsedName(include,[Default]), UsedName(rerunner,[Default]), UsedName(startWith,[Default]), UsedName(assert,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(Equalizer,[Default]), UsedName(withFixture,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(TweetSetSpec,[Default]), UsedName(thrownBy,[Default]), UsedName(createCatchReporter,[Default]), UsedName(AnWord,[Default]), UsedName(assume,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(execute,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(DecidedWord,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(!=,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeast,[Default]), UsedName(behave,[Default]), UsedName(RegexWrapper,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(isInstanceOf,[Default]), UsedName(atMostOneOf,[Default]), UsedName(getClass,[Default]), UsedName(an,[Default]), UsedName($asInstanceOf,[Default]), UsedName(convertToFreeSpecStringWrapper,[Implicit]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(tags,[Default]), UsedName(every,[Default]), UsedName(styleName,[Default]), UsedName(hashCode,[Default]), UsedName(fail,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(<,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(inOrderOnly,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(runNestedSuites,[Default]), UsedName(execute$default$1,[Default]), UsedName(inOrder,[Default]), UsedName(equal,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(be,[Default]), UsedName(lab3;TweetSetSpec;init;,[Default]), UsedName(markup,[Default]), UsedName(sorted,[Default]), UsedName(AWord,[Default]), UsedName(set4d,[Default]), UsedName(typeCheck,[Default]), UsedName(exactly,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(doCollected,[Default]), UsedName(set3,[Default]), UsedName(set1,[Default]), UsedName(endWith,[Default]), UsedName(compile,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(suiteName,[Default]), UsedName(set5,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(c,[Default]), UsedName(only,[Default]), UsedName(matchPattern,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName(set2,[Default]), UsedName($init$,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(execute$default$3,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(assertCompiles,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(length,[Default]), UsedName(>=,[Default]), UsedName(run,[Default]), UsedName(equals,[Default]), UsedName(assertTypeError,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(<=,[Default]), UsedName(exist,[Default]), UsedName(noElementsOf,[Default]), UsedName(intercept,[Default]), UsedName(key,[Default]), UsedName(execute$default$7,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(ResultOfTaggedAsInvocationOnString,[Default]), UsedName(writable,[Default]), UsedName(asSet,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(testNames,[Default]), UsedName(withClue,[Default]), UsedName(oneElementOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(!==,[Default]), UsedName(allElementsOf,[Default]), UsedName(registerTest,[Default]), UsedName(between,[Default]), UsedName(readable,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(noneOf,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(newTestCanceledException,[Default]), UsedName(testDataFor,[Default]), UsedName(finalize,[Default]), UsedName(determined,[Default]), UsedName(of,[Default]), UsedName(the,[Default]), UsedName(contain,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(regex,[Default]), UsedName(size,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(NoArgTest,[Default]), UsedName(allOf,[Default]), UsedName(===,[Default]), UsedName(suiteId,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(RegexWord,[Default]), UsedName(execute$default$4,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(pending,[Default]), UsedName(execute$default$6,[Default]), UsedName(message,[Default]), UsedName(definedAt,[Default]), UsedName(notify,[Default]), UsedName(FreeSpecStringWrapper,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(>,[Default]), UsedName(wait,[Default]), UsedName(decided,[Default]), UsedName(value,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(cancel,[Default]), UsedName(alert,[Default]), UsedName(synchronized,[Default]), UsedName(defined,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(defaultEquality,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(expectedTestCount,[Default]), UsedName(fullyMatch,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(d,[Default]), UsedName(info,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(set4c,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(Collected,[Default]), UsedName(TheAfterWord,[Default]), UsedName(no,[Default]), UsedName(succeed,[Default]), UsedName(notifyAll,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(DeterminedWord,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(oneOf,[Default]), UsedName(##,[Default]), UsedName(execute$default$5,[Default]), UsedName(atMost,[Default]), UsedName(note,[Default]), UsedName(ValueWord,[Default]))) invalidates 1 classes due to The lab3.TweetSetSpec has the following implicit definitions changed:
[debug] 	UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToFreeSpecStringWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]).
[debug]   > by transitive inheritance: Set(lab3.TweetSetSpec)
[debug]   > 
[debug]   > 
[debug]         
[debug] Invalidating (transitively) by inheritance from lab1.ListsSuiteTest...
[debug] Initial set of included nodes: lab1.ListsSuiteTest
[debug] Invalidated by transitive inheritance dependency: Set(lab1.ListsSuiteTest)
[debug] Change NamesChange(lab1.ListsSuiteTest,ModifiedNames(changes = UsedName(empty,[Default]), UsedName(DecidedByEquality,[Default]), UsedName(runTests,[Default]), UsedName(runTest,[Default]), UsedName(KeyWord,[Default]), UsedName(after,[Default]), UsedName(a,[Default]), UsedName(not,[Default]), UsedName(ResultOfEndWithWordForString,[Default]), UsedName(all,[Default]), UsedName(toString,[Default]), UsedName($isInstanceOf,[Default]), UsedName(assertThrows,[Default]), UsedName(AnyShouldWrapper,[Default]), UsedName(have,[Default]), UsedName(intNotZero,[Default]), UsedName(noException,[Default]), UsedName(include,[Default]), UsedName(rerunner,[Default]), UsedName(startWith,[Default]), UsedName(assert,[Default]), UsedName(ResultOfHaveWordForExtent,[Default]), UsedName(Equalizer,[Default]), UsedName(withFixture,[Default]), UsedName(atLeastOneOf,[Default]), UsedName(thrownBy,[Default]), UsedName(createCatchReporter,[Default]), UsedName(AnWord,[Default]), UsedName(assume,[Default]), UsedName(lowPriorityConversionCheckedConstraint,[Default]), UsedName(theSameElementsInOrderAs,[Default]), UsedName(execute,[Default]), UsedName(convertEquivalenceToAToBConversionConstraint,[Default]), UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(DecidedWord,[Default]), UsedName(ResultOfHaveWordForCollectedExtent,[Default]), UsedName(!=,[Default]), UsedName(StringShouldWrapper,[Default]), UsedName(nestedSuites,[Default]), UsedName(atLeast,[Default]), UsedName(behave,[Default]), UsedName(RegexWrapper,[Default]), UsedName(ResultOfFullyMatchWordForString,[Default]), UsedName(isInstanceOf,[Default]), UsedName(atMostOneOf,[Default]), UsedName(getClass,[Default]), UsedName(an,[Default]), UsedName($asInstanceOf,[Default]), UsedName(convertToFreeSpecStringWrapper,[Implicit]), UsedName(convertEquivalenceToBToAConstraint,[Default]), UsedName(ResultOfIncludeWordForString,[Default]), UsedName(tags,[Default]), UsedName(every,[Default]), UsedName(styleName,[Default]), UsedName(hashCode,[Default]), UsedName(fail,[Default]), UsedName(convertToEqualizer,[Implicit]), UsedName(<,[Default]), UsedName(CheckingEqualizer,[Default]), UsedName(inOrderOnly,[Default]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(runNestedSuites,[Default]), UsedName(execute$default$1,[Default]), UsedName(inOrder,[Default]), UsedName(equal,[Default]), UsedName(DeterminedByEquivalence,[Default]), UsedName(be,[Default]), UsedName(markup,[Default]), UsedName(sorted,[Default]), UsedName(AWord,[Default]), UsedName(typeCheck,[Default]), UsedName(exactly,[Default]), UsedName(atLeastOneElementOf,[Default]), UsedName(doCollected,[Default]), UsedName(endWith,[Default]), UsedName(compile,[Default]), UsedName(inOrderElementsOf,[Default]), UsedName(assertDoesNotCompile,[Default]), UsedName(suiteName,[Default]), UsedName(typeCheckedConstraint,[Default]), UsedName(ResultOfCollectedAny,[Default]), UsedName(only,[Default]), UsedName(matchPattern,[Default]), UsedName(execute$default$2,[Default]), UsedName(assertResult,[Default]), UsedName(conversionCheckedConstraint,[Default]), UsedName($init$,[Default]), UsedName(ListsSuiteTest,[Default]), UsedName(lab1;ListsSuiteTest;init;,[Default]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(execute$default$3,[Default]), UsedName(TheSameInstanceAsPhrase,[Default]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(assertCompiles,[Default]), UsedName(newAssertionFailedException,[Default]), UsedName(ResultOfBeWordForCollectedAny,[Default]), UsedName(length,[Default]), UsedName(>=,[Default]), UsedName(run,[Default]), UsedName(equals,[Default]), UsedName(assertTypeError,[Default]), UsedName(ResultOfFullyMatchWordForCollectedString,[Default]), UsedName(<=,[Default]), UsedName(exist,[Default]), UsedName(noElementsOf,[Default]), UsedName(intercept,[Default]), UsedName(key,[Default]), UsedName(execute$default$7,[Default]), UsedName(ResultOfContainWordForCollectedAny,[Default]), UsedName(convertToCheckingEqualizer,[Default]), UsedName(atMostOneElementOf,[Default]), UsedName(ResultOfTaggedAsInvocationOnString,[Default]), UsedName(writable,[Default]), UsedName(ResultOfBeWordForCollectedArray,[Default]), UsedName(testNames,[Default]), UsedName(withClue,[Default]), UsedName(oneElementOf,[Default]), UsedName(asInstanceOf,[Default]), UsedName(!==,[Default]), UsedName(allElementsOf,[Default]), UsedName(registerTest,[Default]), UsedName(between,[Default]), UsedName(readable,[Default]), UsedName(==,[Default]), UsedName(clone,[Default]), UsedName(noneOf,[Default]), UsedName(unconstrainedEquality,[Implicit]), UsedName(newTestCanceledException,[Default]), UsedName(testDataFor,[Default]), UsedName(finalize,[Default]), UsedName(determined,[Default]), UsedName(of,[Default]), UsedName(the,[Default]), UsedName(contain,[Default]), UsedName(convertEquivalenceToAToBConstraint,[Default]), UsedName(StringShouldWrapperForVerb,[Default]), UsedName(convertEquivalenceToBToAConversionConstraint,[Default]), UsedName(regex,[Default]), UsedName(size,[Default]), UsedName(ResultOfNotWordForCollectedAny,[Default]), UsedName(NoArgTest,[Default]), UsedName(allOf,[Default]), UsedName(===,[Default]), UsedName(suiteId,[Default]), UsedName(ResultOfIncludeWordForCollectedString,[Default]), UsedName(ResultOfEndWithWordForCollectedString,[Default]), UsedName(RegexWord,[Default]), UsedName(execute$default$4,[Default]), UsedName(registerIgnoredTest,[Default]), UsedName(pending,[Default]), UsedName(execute$default$6,[Default]), UsedName(message,[Default]), UsedName(definedAt,[Default]), UsedName(notify,[Default]), UsedName(FreeSpecStringWrapper,[Default]), UsedName(ResultOfBeWordForAny,[Default]), UsedName(>,[Default]), UsedName(wait,[Default]), UsedName(decided,[Default]), UsedName(value,[Default]), UsedName(theSameInstanceAs,[Default]), UsedName(cancel,[Default]), UsedName(alert,[Default]), UsedName(synchronized,[Default]), UsedName(defined,[Default]), UsedName(HavePropertyMatcherGenerator,[Default]), UsedName(defaultEquality,[Default]), UsedName(lowPriorityTypeCheckedConstraint,[Default]), UsedName(expectedTestCount,[Default]), UsedName(fullyMatch,[Default]), UsedName(testDataFor$default$2,[Default]), UsedName(info,[Default]), UsedName(pendingUntilFixed,[Default]), UsedName(ResultOfStartWithWordForCollectedString,[Default]), UsedName(PlusOrMinusWrapper,[Default]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(Collected,[Default]), UsedName(TheAfterWord,[Default]), UsedName(no,[Default]), UsedName(succeed,[Default]), UsedName(notifyAll,[Default]), UsedName(ResultOfStartWithWordForString,[Default]), UsedName(ne,[Default]), UsedName(eq,[Default]), UsedName(theSameElementsAs,[Default]), UsedName(DeterminedWord,[Default]), UsedName(convertToStringShouldWrapper,[Implicit]), UsedName(oneOf,[Default]), UsedName(##,[Default]), UsedName(execute$default$5,[Default]), UsedName(atMost,[Default]), UsedName(note,[Default]), UsedName(ValueWord,[Default]))) invalidates 1 classes due to The lab1.ListsSuiteTest has the following implicit definitions changed:
[debug] 	UsedName(convertNumericToPlusOrMinusWrapper,[Implicit]), UsedName(convertToFreeSpecStringWrapper,[Implicit]), UsedName(convertToEqualizer,[Implicit]), UsedName(convertSymbolToHavePropertyMatcherGenerator,[Implicit]), UsedName(convertToStringShouldWrapperForVerb,[Implicit]), UsedName(convertToRegexWrapper,[Implicit]), UsedName(unconstrainedEquality,[Implicit]), UsedName(convertToAnyShouldWrapper,[Implicit]), UsedName(convertToStringShouldWrapper,[Implicit]).
[debug]   > by transitive inheritance: Set(lab1.ListsSuiteTest)
[debug]   > 
[debug]   > 
[debug]         
[debug] New invalidations:
[debug] Initial set of included nodes: 
[debug] Previously invalidated, but (transitively) depend on new invalidations:
[debug] Final step, transitive dependencies:
[debug] 	Set()
[debug] No classes were invalidated.
[debug] Scala compilation took 5.1521546 s
[info] done compiling
